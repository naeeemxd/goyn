Future<void> sendOTP(BuildContext context,String mobileNumber) async {
    if (_isLoading) return; // Prevent multiple taps

    if (!_isConnected) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              "No internet connection. Please check your connection and try again."),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    _isLoading = true;
    notifyListeners();

    if (!_canResendOtp) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              "Please wait $_otpValidity seconds before requesting new OTP"),
          backgroundColor: Colors.orange,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return;
    }

    if (mobileNumber.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Please enter your mobile number"),
          backgroundColor: Colors.red,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return;
    }

    final QuerySnapshot adminSnapshot = await db
        .collection("STAFF_DETAILS")
        .where("STAFF_PHONE_NUMBER", isEqualTo: mobileNumber)
        .where("STAFF_JOB_ROLE", isEqualTo: "Sales Executive")
        .get();

    if (adminSnapshot.docs.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Mobile number not found or not a Sales Executive"),
          backgroundColor: Colors.red,
        ),
      );
      mobileController.clear();
      _isLoading = false;
      notifyListeners();
      return;
    }

    try {
      String generatedOTP = _generateOTP();
      _otp = generatedOTP;
      print("Generated OTP: $_otp"); // Debug print

      String template = "OTP+for+your+mobile+number+verification+is+$_otp.Spinecodes";

      final uri = Uri.parse('https://m1.sarv.com/api/v2.0/sms_campaign.php'
          '?token=140634824266559c35cb5aa4.81948085'
          '&user_id=76595417'
          '&route=TR'
          '&template_id=13908'
          '&sender_id=SPINEO'
          '&language=EN'
          '&template=$template'
          '&contact_numbers=$mobileNumber');

      print("API URL: $uri"); // Debug print

      final response = await http.get(uri);
      print("API Response: ${response.body}"); // Debug print

      if (response.statusCode == 200) {
        // Start timer immediately after successful OTP send
        _startTimer();

        await db.collection("LOGINS").doc(adminId).set({
          'MOBILE': _mobileNumber,
          'OTP': generatedOTP,
          'DESIGNATION': "Sales Executive",
          'LOGIN_TIMESTAMP': FieldValue.serverTimestamp(),
        });

        // Start SMS listener before navigation
        startSmsListener();

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("OTP sent successfully!"),
            backgroundColor: Colors.green,
          ),
        );

        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => OtpVerificationScreen(phone: mobileNumber,)),
        );
      } else {
        throw Exception('HTTP Error: ${response.statusCode}');
      }
    } catch (e) {
      print("Error sending OTP: $e"); // Debug print
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Error sending OTP: $e"),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> verifyOtp(BuildContext context,String phoneNumber) async {
    if (_isLoading) return; // Prevent multiple taps

    if (!_isConnected) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              "No internet connection. Please check your connection and try again."),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    _isLoading = true;
    notifyListeners();

    if (phoneNumber.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Please enter your mobile number"),
          backgroundColor: Colors.red,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return;
    }

    String enteredOTP = otpController.text;

    if (enteredOTP.length < 6) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Please enter the full 6-digit OTP"),
          backgroundColor: Colors.red,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return;
    }

    if (enteredOTP == _otp) {
      try {
        await db.collection("LOGINS").doc(adminId).set({
          'MOBILE': _mobileNumber,
          'OTP': _otp,
          'DESIGNATION': "Sales Executive",
          'LOGIN_TIMESTAMP': FieldValue.serverTimestamp(),
        }, SetOptions(merge: true));
userAuthorizedForSE(phoneNumber, context);
        // Navigator.pushReplacement(
        //   context,
        //   MaterialPageRoute(builder: (context) => BottomNavigation()),
        // );

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Login successful!"),
            backgroundColor: Colors.green,
          ),
        );
      } catch (e) {
        print("Error updating login data: $e");
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Invalid OTP. Please try again."),
          backgroundColor: Colors.red,
        ),
      );
    }
    _isLoading = false;
    notifyListeners();
  }
